syntax = "proto3";

package test.package;

option go_package = "github.com/sapk/protoc-gen-openapiv3/testdata;testdata";

// Import required protobuf types
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "options/annotations.proto";

option (protoc_gen_openapiv3.options.info) = {
  title: "User Management API"
  description: "API for managing users in the system. Provides CRUD operations and user status management."
  terms_of_service: "https://test.com/terms"
  contact: {
    name: "API Support"
    url: "https://test.com/support"
    email: "support@test.com"
  }
  license: {
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  }
  version: "1.2.3"
};

option (protoc_gen_openapiv3.options.server) = {
  url: "https://dev.test.com/v1"
  description: "Development server"
};

option (protoc_gen_openapiv3.options.server) = {
  url: "https://preprod.test.com/v1"
  description: "PreProduction server"
}; 

option (protoc_gen_openapiv3.options.server) = {
  url: "https://test.com/v1"
  description: "Production server"
}; 

// Define security schemes
option (protoc_gen_openapiv3.options.securityScheme) = {
  type: "oauth2"
  description: "OAuth2 authentication with authorization code flow"
  flows: {
    authorization_code: {
      authorization_url: "https://auth.test.com/oauth/authorize"
      token_url: "https://auth.test.com/oauth/token"
      refresh_url: "https://auth.test.com/oauth/refresh"
      scopes: {
        name: "read"
        description: "Read access to user data"
      }
      scopes: {
        name: "write"
        description: "Write access to user data"
      }
      scopes: {
        name: "admin"
        description: "Administrative access"
      }
    }
  }
};

option (protoc_gen_openapiv3.options.securityScheme) = {
  type: "http"
  description: "Bearer token authentication"
  scheme: "bearer"
  bearer_format: "JWT"
};

option (protoc_gen_openapiv3.options.securityScheme) = {
  type: "apiKey"
  description: "API key authentication"
  name: "X-API-Key"
  in: "header"
};

// Define default security requirements (all endpoints require OAuth2 with read scope)
option (protoc_gen_openapiv3.options.security) = {
  name: "oauth2"
  scopes: ["read"]
};

// Define default security requirements (all endpoints require OAuth2 with read scope)
option (protoc_gen_openapiv3.options.security) = {
  name: "apiKey"
};

// Define tags for grouping operations
option (protoc_gen_openapiv3.options.tag) = {
  name: "users"
  description: "User management operations including CRUD operations and user status management"
  external_docs: {
    description: "Find more information about user management"
    url: "https://test.com/docs/users"
  }
};

option (protoc_gen_openapiv3.options.tag) = {
  name: "user-profile"
  description: "Operations related to user profile management and updates"
  external_docs: {
    description: "Learn more about user profiles"
    url: "https://test.com/docs/user-profiles"
  }
};

option (protoc_gen_openapiv3.options.tag) = {
  name: "user-status"
  description: "Operations for managing user status and account state"
  external_docs: {
    description: "User status management documentation"
    url: "https://test.com/docs/user-status"
  }
};

// Error represents a standard API error response
message Error {
  // A human-readable error message
  string message = 1;
  // A machine-readable error code
  int32 code = 2;
  // Additional error details
  map<string, string> details = 3;
}

// UserService provides operations for managing users
// This service handles all user-related operations including CRUD operations and user status management.
service UserService {
  // GetUser retrieves a user by ID
  // Returns the full user details including profile information, status, and metadata.
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}"
    };
    option (protoc_gen_openapiv3.options.operation) = {
      summary: "GetUser retrieves a user by ID (override)"
      description: "Returns the full user details including profile information, status, and metadata. (override)"
      parameters: {
        name: "user_id"
        in: "path"
        description: "The unique identifier of the user"
        required: true
        schema: {
          type: "string"
          pattern: "^[a-zA-Z0-9-]+$"
        }
      }
      parameters: {
        name: "fields"
        in: "query"
        description: "Comma-separated list of fields to include in the response"
        required: false
        schema: {
          type: "array"
          items: {
            type: "string"
            enum: ["id", "email", "full_name", "status", "roles", "address", "metadata", "created_at", "updated_at"]
          }
        }
        style: "form"
        explode: true
      }
      parameters: {
        name: "version"
        in: "header"
        description: "API version to use"
        required: false
        schema: {
          type: "string"
          default: "v1"
        }
        style: "simple"
      }
      parameters: {
        name: "include_deleted"
        in: "query"
        description: "Whether to include deleted users in the response"
        required: false
        schema: {
          type: "boolean"
        }
        allow_empty_value: true
      }
      parameters: {
        name: "filter"
        in: "query"
        description: "Complex filter object for advanced filtering"
        required: false
        schema: {
          type: "object"
          properties: {
            key: "status"
            value: {
              type: "string"
              enum: ["USER_STATUS_ACTIVE", "USER_STATUS_INACTIVE", "USER_STATUS_SUSPENDED"]
            }
          }
          properties: {
            key: "roles"
            value: {
              type: "array"
              items: {
                type: "string"
              }
            }
          }
          properties: {
            key: "created_after"
            value: {
              type: "string"
              format: "date-time"
            }
          }
        }
        style: "deepObject"
        explode: true
      }
      responses: {
        code: "200"
        description: "Successfully retrieved user details"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/User"
            }
          }
        }
      }
      responses: {
        code: "404"
        description: "User not found"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
      responses: {
        code: "403"
        description: "Insufficient permissions to access user"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
    }; 
  }

  // ListUsers retrieves a list of users with optional filtering
  // Returns a paginated list of users that can be filtered by status, roles, and search query.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
    option (protoc_gen_openapiv3.options.operation) = {
      security: {
        name: "oauth2"
        scopes: ["read"]
      }
      responses: {
        code: "200"
        description: "Successfully retrieved list of users"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/ListUsersResponse"
            }
          }
        }
      }
      responses: {
        code: "400"
        description: "Invalid request parameters"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
      responses: {
        code: "403"
        description: "Insufficient permissions to list users"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
    };
  }

  // CreateUser creates a new user
  // Creates a new user with the provided details and returns the created user with generated ID.
  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "user"
    };
    option (protoc_gen_openapiv3.options.operation) = {
      security: {
        name: "oauth2"
        scopes: ["write"]
      }
      request_body: {
        description: "User object to be created"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/CreateUserRequest"
            }
            examples: {
              key: "user"
              value: {
                summary: "User Example"
                description: "A sample user object"
                value: "{\n  \"email\": \"john.doe@example.com\",\n  \"full_name\": \"John Doe\",\n  \"status\": \"USER_STATUS_ACTIVE\",\n  \"roles\": [\"user\"],\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"country\": \"USA\",\n    \"postal_code\": \"10001\"\n  }\n}"
              }
            }
          }
        }
        required: true
      }
      responses: {
        code: "201"
        description: "User successfully created"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/User"
            }
          }
        }
      }
      responses: {
        code: "400"
        description: "Invalid user data provided"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
      responses: {
        code: "409"
        description: "User with provided email already exists"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
      responses: {
        code: "403"
        description: "Insufficient permissions to create user"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
    };
  }

  // UpdateUser updates an existing user
  // Updates all fields of an existing user with the provided values.
  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      put: "/v1/users/{user_id}"
      body: "user"
    };
    option (protoc_gen_openapiv3.options.operation) = {
      security: {
        name: "oauth2"
        scopes: ["write"]
      }
      request_body: {
        description: "Updated user object"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/User"
            }
            examples: {
              key: "user"
              value: {
                summary: "Updated User Example"
                description: "A sample updated user object"
                value: "{\n  \"email\": \"john.doe.updated@example.com\",\n  \"full_name\": \"John Doe Updated\",\n  \"status\": \"USER_STATUS_ACTIVE\",\n  \"roles\": [\"user\", \"premium\"],\n  \"address\": {\n    \"street\": \"456 New St\",\n    \"city\": \"Los Angeles\",\n    \"state\": \"CA\",\n    \"country\": \"USA\",\n    \"postal_code\": \"90001\"\n  }\n}"
              }
            }
          }
        }
        required: true
      }
      responses: {
        code: "200"
        description: "User successfully updated"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/User"
            }
          }
        }
      }
      responses: {
        code: "400"
        description: "Invalid user data provided"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
      responses: {
        code: "404"
        description: "User not found"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
      responses: {
        code: "403"
        description: "Insufficient permissions to update user"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
    };
  }

  // PatchUser partially updates an existing user
  // Updates only the specified fields of an existing user while preserving other fields.
  rpc PatchUser(PatchUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/v1/users/{user_id}"
      body: "user"
    };
    option (protoc_gen_openapiv3.options.operation) = {
      security: {
        name: "oauth2"
        scopes: ["write"]
      }
      responses: {
        code: "200"
        description: "User successfully updated"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/User"
            }
          }
        }
      }
      responses: {
        code: "400"
        description: "Invalid user data provided"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
      responses: {
        code: "404"
        description: "User not found"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
      responses: {
        code: "403"
        description: "Insufficient permissions to update user"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
    };
  }

  // DeleteUser deletes a user
  // Permanently removes a user from the system.
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/users/{user_id}"
    };
    option (protoc_gen_openapiv3.options.operation) = {
      security: {
        name: "oauth2"
        scopes: ["admin"]
      }
      responses: {
        code: "204"
        description: "User successfully deleted"
      }
      responses: {
        code: "404"
        description: "User not found"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
      responses: {
        code: "403"
        description: "Insufficient permissions to delete user"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
      responses: {
        code: "409"
        description: "User cannot be deleted due to existing dependencies"
        content: {
          key: "application/json"
          value: {
            schema: {
              ref: "#/components/schemas/Error"
            }
          }
        }
      }
    };
  }
}

// User represents a user in the system
// Contains all user information including profile details, status, and metadata.
message User {
  string user_id = 1;
  string email = 2;
  string full_name = 3;
  UserStatus status = 4;
  repeated string roles = 5;
  optional Address address = 6;
  map<string, string> metadata = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
}

// Address represents a physical address
// Contains structured address information for a user's physical location.
message Address {
  string street = 1;
  string city = 2;
  string state = 3;
  string country = 4;
  string postal_code = 5;
}

// UserStatus represents the current status of a user
// Defines the possible states a user can be in within the system.
enum UserStatus {
  USER_STATUS_UNSPECIFIED = 0;
  USER_STATUS_ACTIVE = 1;
  USER_STATUS_INACTIVE = 2;
  USER_STATUS_SUSPENDED = 3;
  USER_STATUS_DELETED = 4;
}

// GetUserRequest is used to retrieve a single user
// Contains the user ID needed to fetch the user details.
message GetUserRequest {
  string user_id = 1;
}

// ListUsersRequest is used to retrieve a list of users with filtering
// Supports pagination and various filtering options to find specific users.
message ListUsersRequest {
  int32 page_size = 1;
  string page_token = 2;
  optional UserStatus status = 3;
  optional string search_query = 4;
  repeated string roles = 5;
}

// ListUsersResponse contains the list of users and pagination information
//
// Returns the filtered list of users 
// along with pagination metadata.
message ListUsersResponse {
  repeated User users = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// CreateUserRequest is used to create a new user
// Contains the user details needed to create a new user account.
message CreateUserRequest {
  User user = 1;
}

// UpdateUserRequest is used to update an existing user
// Contains the user ID and the updated user details.
message UpdateUserRequest {
  string user_id = 1;
  User user = 2;
}

// DeleteUserRequest is used to delete a user
//
// Contains the user ID of the user to be deleted.
message DeleteUserRequest {
  string user_id = 1;
}

// PatchUserRequest is used to partially update an existing user
//
// Contains the user ID and the fields to be updated.
message PatchUserRequest {
  string user_id = 1;
  User user = 2;
}