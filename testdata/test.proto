syntax = "proto3";

package test.package;

option go_package = "github.com/sapk/protoc-gen-openapiv3/testdata;testdata";

// Import required protobuf types
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "options/annotations.proto";

option (protoc_gen_openapiv3.options.info) = {
  title: "User Management API"
  description: "API for managing users in the system. Provides CRUD operations and user status management."
  terms_of_service: "https://test.com/terms"
  contact: {
    name: "API Support"
    url: "https://test.com/support"
    email: "support@test.com"
  }
  license: {
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  }
  version: "1.2.3"
};

option (protoc_gen_openapiv3.options.server) = {
  url: "https://dev.test.com/v1"
  description: "Development server"
};

option (protoc_gen_openapiv3.options.server) = {
  url: "https://preprod.test.com/v1"
  description: "PreProduction server"
}; 

option (protoc_gen_openapiv3.options.server) = {
  url: "https://test.com/v1"
  description: "Production server"
}; 

// UserService provides operations for managing users
service UserService {
  // GetUser retrieves a user by ID
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}"
    };
  }

  // ListUsers retrieves a list of users with optional filtering
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  }

  // CreateUser creates a new user
  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "user"
    };
  }

  // UpdateUser updates an existing user
  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      put: "/v1/users/{user_id}"
      body: "user"
    };
  }

  // PatchUser partially updates an existing user
  rpc PatchUser(PatchUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/v1/users/{user_id}"
      body: "user"
    };
  }

  // DeleteUser deletes a user
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/users/{user_id}"
    };
  }
}

// User represents a user in the system
message User {
  string user_id = 1;
  string email = 2;
  string full_name = 3;
  UserStatus status = 4;
  repeated string roles = 5;
  optional Address address = 6;
  map<string, string> metadata = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
}

// Address represents a physical address
message Address {
  string street = 1;
  string city = 2;
  string state = 3;
  string country = 4;
  string postal_code = 5;
}

// UserStatus represents the current status of a user
enum UserStatus {
  USER_STATUS_UNSPECIFIED = 0;
  USER_STATUS_ACTIVE = 1;
  USER_STATUS_INACTIVE = 2;
  USER_STATUS_SUSPENDED = 3;
  USER_STATUS_DELETED = 4;
}

// GetUserRequest is used to retrieve a single user
message GetUserRequest {
  string user_id = 1;
}

// ListUsersRequest is used to retrieve a list of users with filtering
message ListUsersRequest {
  int32 page_size = 1;
  string page_token = 2;
  optional UserStatus status = 3;
  optional string search_query = 4;
  repeated string roles = 5;
}

// ListUsersResponse contains the list of users and pagination information
message ListUsersResponse {
  repeated User users = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// CreateUserRequest is used to create a new user
message CreateUserRequest {
  User user = 1;
}

// UpdateUserRequest is used to update an existing user
message UpdateUserRequest {
  string user_id = 1;
  User user = 2;
}

// DeleteUserRequest is used to delete a user
message DeleteUserRequest {
  string user_id = 1;
}

// PatchUserRequest is used to partially update an existing user
message PatchUserRequest {
  string user_id = 1;
  User user = 2;
}