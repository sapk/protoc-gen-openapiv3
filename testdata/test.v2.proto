syntax = "proto3";

package test.package;

option go_package = "github.com/sapk/protoc-gen-openapiv3/testdata;testdata";

// Import required protobuf types
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User Management API"
    description: "API for managing users in the system. Provides CRUD operations and user status management."
    terms_of_service: "https://test.com/terms"
    contact: {
      name: "API Support"
      url: "https://test.com/support"
      email: "support@test.com"
    }
    license: {
      name: "Apache 2.0"
      url: "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
    version: "1.2.3"
  }
  host: "test.com"
  base_path: "/v1"
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "oauth2"
      value: {
        type: TYPE_OAUTH2
        description: "OAuth2 authentication with authorization code flow"
        flow: FLOW_ACCESS_CODE
        authorization_url: "https://auth.test.com/oauth/authorize"
        token_url: "https://auth.test.com/oauth/token"
        scopes: {
          scope: {
            key: "read"
            value: "Read access to user data"
          }
          scope: {
            key: "write"
            value: "Write access to user data"
          }
          scope: {
            key: "admin"
            value: "Administrative access"
          }
        }
      }
    }
    security: {
      key: "bearer"
      value: {
        type: TYPE_BASIC
        description: "Bearer token authentication"
        in: IN_HEADER
      }
    }
    security: {
      key: "apiKey"
      value: {
        type: TYPE_API_KEY
        description: "API key authentication"
        name: "X-API-Key"
        in: IN_HEADER
      }
    }
  }
  security: {
    security_requirement: {
      key: "oauth2"
      value: {
        scope: "read"
      }
    }
    security_requirement: {
      key: "apiKey"
      value: {
        scope: ""
      }
    }
  }
  tags: {
    name: "users"
    description: "User management operations including CRUD operations and user status management"
    external_docs: {
      description: "Find more information about user management"
      url: "https://test.com/docs/users"
    }
  }
  tags: {
    name: "user-profile"
    description: "Operations related to user profile management and updates"
    external_docs: {
      description: "Learn more about user profiles"
      url: "https://test.com/docs/user-profiles"
    }
  }
  tags: {
    name: "user-status"
    description: "Operations for managing user status and account state"
    external_docs: {
      description: "User status management documentation"
      url: "https://test.com/docs/user-status"
    }
  }
};

// Error represents a standard API error response
message Error {
  // A human-readable error message
  string message = 1;
  // A machine-readable error code
  int32 code = 2;
  // Additional error details
  map<string, string> details = 3;
}

// UserService provides operations for managing users
// This service handles all user-related operations including CRUD operations and user status management.
service UserService {
  // GetUser retrieves a user by ID
  // Returns the full user details including profile information, status, and metadata.
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "GetUser retrieves a user by ID (override)"
      description: "Returns the full user details including profile information, status, and metadata. (override)"
      tags: "users"
      parameters: {
        headers: {
          name: "version"
          description: "API version to use"
          type: STRING
          required: false
        }
      }
      responses: {
        key: "200"
        value: {
          description: "Successfully retrieved user details"
          schema: {
            json_schema: {
              ref: "#/definitions/User"
            }
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "User not found"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Insufficient permissions to access user"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
    };
  }

  // ListUsers retrieves a list of users with optional filtering
  // Returns a paginated list of users that can be filtered by status, roles, and search query.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "users"
      security: {
        security_requirement: {
          key: "oauth2"
          value: {
            scope: "read"
          }
        }
      }
      responses: {
        key: "200"
        value: {
          description: "Successfully retrieved list of users"
          schema: {
            json_schema: {
              ref: "#/definitions/ListUsersResponse"
            }
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Invalid request parameters"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Insufficient permissions to list users"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
    };
  }

  // CreateUser creates a new user
  // Creates a new user with the provided details and returns the created user with generated ID.
  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "user"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "users"
      security: {
        security_requirement: {
          key: "oauth2"
          value: {
            scope: "write"
          }
        }
      }
      consumes: "application/json"
      produces: "application/json"
      responses: {
        key: "201"
        value: {
          description: "User successfully created"
          schema: {
            json_schema: {
              ref: "#/definitions/User"
            }
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Invalid user data provided"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
      responses: {
        key: "409"
        value: {
          description: "User with provided email already exists"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Insufficient permissions to create user"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
    };
  }

  // UpdateUser updates an existing user
  // Updates all fields of an existing user with the provided values.
  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      put: "/v1/users/{user_id}"
      body: "user"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "users"
      security: {
        security_requirement: {
          key: "oauth2"
          value: {
            scope: "write"
          }
        }
      }
      consumes: "application/json"
      produces: "application/json"
      responses: {
        key: "200"
        value: {
          description: "User successfully updated"
          schema: {
            json_schema: {
              ref: "#/definitions/User"
            }
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Invalid user data provided"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "User not found"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Insufficient permissions to update user"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
    };
  }

  // PatchUser partially updates an existing user
  // Updates only the specified fields of an existing user while preserving other fields.
  rpc PatchUser(PatchUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/v1/users/{user_id}"
      body: "user"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "users"
      security: {
        security_requirement: {
          key: "oauth2"
          value: {
            scope: "write"
          }
        }
      }
      consumes: "application/json"
      produces: "application/json"
      responses: {
        key: "200"
        value: {
          description: "User successfully updated"
          schema: {
            json_schema: {
              ref: "#/definitions/User"
            }
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Invalid user data provided"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "User not found"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Insufficient permissions to update user"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
    };
  }

  // DeleteUser deletes a user
  // Permanently removes a user from the system.
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/users/{user_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "users"
      security: {
        security_requirement: {
          key: "oauth2"
          value: {
            scope: "admin"
          }
        }
      }
      responses: {
        key: "204"
        value: {
          description: "User successfully deleted"
        }
      }
      responses: {
        key: "404"
        value: {
          description: "User not found"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Insufficient permissions to delete user"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
      responses: {
        key: "409"
        value: {
          description: "User cannot be deleted due to existing dependencies"
          schema: {
            json_schema: {
              ref: "#/definitions/Error"
            }
          }
        }
      }
    };
  }
}

// User represents a user in the system
// Contains all user information including profile details, status, and metadata.
message User {
  string user_id = 1;
  string email = 2;
  string full_name = 3;
  UserStatus status = 4;
  repeated string roles = 5;
  optional Address address = 6;
  map<string, string> metadata = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
}

// Address represents a physical address
// Contains structured address information for a user's physical location.
message Address {
  string street = 1;
  string city = 2;
  string state = 3;
  string country = 4;
  string postal_code = 5;
}

// UserStatus represents the current status of a user
// Defines the possible states a user can be in within the system.
enum UserStatus {
  USER_STATUS_UNSPECIFIED = 0;
  USER_STATUS_ACTIVE = 1;
  USER_STATUS_INACTIVE = 2;
  USER_STATUS_SUSPENDED = 3;
  USER_STATUS_DELETED = 4;
}

// GetUserRequest is used to retrieve a single user
// Contains the user ID needed to fetch the user details.
message GetUserRequest {
  string user_id = 1;
}

// ListUsersRequest is used to retrieve a list of users with filtering
// Supports pagination and various filtering options to find specific users.
message ListUsersRequest {
  int32 page_size = 1;
  string page_token = 2;
  optional UserStatus status = 3;
  optional string search_query = 4;
  repeated string roles = 5;
}

// ListUsersResponse contains the list of users and pagination information
//
// Returns the filtered list of users 
// along with pagination metadata.
message ListUsersResponse {
  repeated User users = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// CreateUserRequest is used to create a new user
// Contains the user details needed to create a new user account.
message CreateUserRequest {
  User user = 1;
}

// UpdateUserRequest is used to update an existing user
// Contains the user ID and the updated user details.
message UpdateUserRequest {
  string user_id = 1;
  User user = 2;
}

// DeleteUserRequest is used to delete a user
//
// Contains the user ID of the user to be deleted.
message DeleteUserRequest {
  string user_id = 1;
}

// PatchUserRequest is used to partially update an existing user
//
// Contains the user ID and the fields to be updated.
message PatchUserRequest {
  string user_id = 1;
  User user = 2;
} 