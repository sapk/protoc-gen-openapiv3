openapi: 3.1.0
info:
    title: User Management API
    description: API for managing users in the system. Provides CRUD operations and user status management.
    termsOfService: https://test.com/terms
    contact:
        name: API Support
        url: https://test.com/support
        email: support@test.com
    license:
        name: Apache 2.0
        url: https://www.apache.org/licenses/LICENSE-2.0.html
    version: 1.2.3
servers:
    - url: "\x02://test.com/v1"
      description: Server for test.com
paths:
    /v1/users/{user_id}:
        get:
            tags:
                - UserService
            summary: GetUser retrieves a user by ID
            description: Returns the full user details including profile information, status, and metadata.
            operationId: GetUser
            parameters: []
            responses:
                "200":
                    description: Response for GetUser operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
        put:
            tags:
                - UserService
            summary: UpdateUser updates an existing user
            description: Updates all fields of an existing user with the provided values.
            operationId: UpdateUser
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateUserRequest'
            responses:
                "200":
                    description: Response for UpdateUser operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
        delete:
            tags:
                - UserService
            summary: DeleteUser deletes a user
            description: Permanently removes a user from the system.
            operationId: DeleteUser
            parameters: []
            responses:
                "200":
                    description: Response for DeleteUser operation
        patch:
            tags:
                - UserService
            summary: PatchUser partially updates an existing user
            description: Updates only the specified fields of an existing user while preserving other fields.
            operationId: PatchUser
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PatchUserRequest'
            responses:
                "200":
                    description: Response for PatchUser operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
    /v1/users:
        get:
            tags:
                - UserService
            summary: ListUsers retrieves a list of users with optional filtering
            description: Returns a paginated list of users that can be filtered by status, roles, and search query.
            operationId: ListUsers
            parameters: []
            responses:
                "200":
                    description: Response for ListUsers operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListUsersResponse'
        post:
            tags:
                - UserService
            summary: CreateUser creates a new user
            description: Creates a new user with the provided details and returns the created user with generated ID.
            operationId: CreateUser
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateUserRequest'
            responses:
                "200":
                    description: Response for CreateUser operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
components:
    schemas:
        UserStatus:
            type: string
            enum:
                - USER_STATUS_UNSPECIFIED
                - USER_STATUS_ACTIVE
                - USER_STATUS_INACTIVE
                - USER_STATUS_SUSPENDED
                - USER_STATUS_DELETED
            description: |-
                UserStatus represents the current status of a user
                 Defines the possible states a user can be in within the system.
            default: USER_STATUS_UNSPECIFIED
        Address:
            type: object
            properties:
                street:
                    type: string
                city:
                    type: string
                state:
                    type: string
                country:
                    type: string
                postal_code:
                    type: string
            required:
                - street
                - city
                - state
                - country
                - postal_code
            description: |-
                Address represents a physical address
                 Contains structured address information for a user's physical location.
        User:
            type: object
            properties:
                user_id:
                    type: string
                full_name:
                    type: string
                status:
                    $ref: '#/components/schemas/UserStatus'
                address:
                    $ref: '#/components/schemas/Address'
                created_at:
                    type: string
                    format: date-time
                updated_at:
                    type: string
                    format: date-time
                email:
                    type: string
                roles:
                    type: array
                    items:
                        type: string
                metadata:
                    type: object
                    additionalProperties:
                        type: string
            required:
                - user_id
                - email
                - full_name
                - status
                - roles
                - metadata
                - created_at
                - updated_at
            description: |-
                User represents a user in the system
                 Contains all user information including profile details, status, and metadata.
        ListUsersResponse:
            type: object
            properties:
                next_page_token:
                    type: string
                total_count:
                    type: integer
                users:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
            required:
                - users
                - next_page_token
                - total_count
            description: "ListUsersResponse contains the list of users and pagination information\n\n Returns the filtered list of users \n along with pagination metadata."
        CreateUserRequest:
            type: object
            properties:
                user:
                    $ref: '#/components/schemas/User'
            required:
                - user
            description: |-
                CreateUserRequest is used to create a new user
                 Contains the user details needed to create a new user account.
        UpdateUserRequest:
            type: object
            properties:
                user_id:
                    type: string
                user:
                    $ref: '#/components/schemas/User'
            required:
                - user_id
                - user
            description: |-
                UpdateUserRequest is used to update an existing user
                 Contains the user ID and the updated user details.
        PatchUserRequest:
            type: object
            properties:
                user_id:
                    type: string
                user:
                    $ref: '#/components/schemas/User'
            required:
                - user_id
                - user
            description: |-
                PatchUserRequest is used to partially update an existing user

                 Contains the user ID and the fields to be updated.
    securitySchemes:
        oauth2:
            type: oauth2
            description: OAuth2 authentication with authorization code flow
            name: oauth2
            flows:
                authorizationCode:
                    authorizationUrl: https://auth.test.com/oauth/authorize
                    tokenUrl: https://auth.test.com/oauth/token
                    scopes:
                        read: Read access to user data
                        write: Write access to user data
                        admin: Administrative access
        http:
            type: http
            description: Bearer token authentication
            name: bearer
            scheme: basic
        apiKey:
            type: apiKey
            description: API key authentication
            name: X-API-Key
            in: header
security:
    - apiKey:
        - read
        - ""
tags:
    - name: users
      description: User management operations including CRUD operations and user status management
      externalDocs:
        description: Find more information about user management
        url: https://test.com/docs/users
    - name: user-profile
      description: Operations related to user profile management and updates
      externalDocs:
        description: Learn more about user profiles
        url: https://test.com/docs/user-profiles
    - name: user-status
      description: Operations for managing user status and account state
      externalDocs:
        description: User status management documentation
        url: https://test.com/docs/user-status
