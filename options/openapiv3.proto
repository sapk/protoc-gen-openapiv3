syntax = "proto3";

package protoc_gen_openapiv3.options;

option go_package = "github.com/sapk/protoc-gen-openapiv3/options";

// Contact information for the exposed API.
message Contact {
  // The identifying name of the contact person/organization.
  string name = 1;
  // The URL pointing to the contact information. MUST be in the format of a URL.
  string url = 2;
  // The email address of the contact person/organization. MUST be in the format of an email address.
  string email = 3;
}

// License information for the exposed API.
message License {
  // The license name used for the API.
  string name = 1;
  // A URL to the license used for the API. MUST be in the format of a URL.
  string url = 2;
}

// Info provides metadata about the API.
message Info {
  // The title of the application.
  string title = 1;
  // A short description of the application. CommonMark syntax MAY be used for rich text representation.
  string description = 2;
  // A URL to the Terms of Service for the API. MUST be in the format of a URL.
  string terms_of_service = 3;
  // The contact information for the exposed API.
  Contact contact = 4;
  // The license information for the exposed API.
  License license = 5;
  // The version of the OpenAPI document.
  string version = 6;
}

// OpenAPI Server Variable object
message ServerVariable {
  repeated string enum = 1;
  string default = 2;
  string description = 3;
}

// OpenAPI Server object
message Server {
  string url = 1;
  string description = 2;
  map<string, ServerVariable> variables = 3;
}

// OAuth2 Flow object
message OAuth2Flow {
  // The authorization URL to be used for this flow.
  string authorization_url = 1;
  // The token URL to be used for this flow.
  string token_url = 2;
  // The URL to be used for obtaining refresh tokens.
  string refresh_url = 3;
  // The available scopes for the OAuth2 security scheme.
  map<string, string> scopes = 4;
}

// OAuth2 Flows object
message OAuth2Flows {
  // Configuration for the OAuth2 Implicit flow
  OAuth2Flow implicit = 1;
  // Configuration for the OAuth2 Authorization Code flow
  OAuth2Flow authorization_code = 2;
  // Configuration for the OAuth2 Client Credentials flow
  OAuth2Flow client_credentials = 3;
  // Configuration for the OAuth2 Password flow
  OAuth2Flow password = 4;
}

// Security Scheme object
message SecurityScheme {
  // The type of the security scheme.
  string type = 1;
  // A description for security scheme.
  string description = 2;
  // The name of the header, query or cookie parameter to be used.
  string name = 3;
  // The location of the API key.
  string in = 4;
  // The name of the HTTP Authentication scheme.
  string scheme = 5;
  // A hint to the client to identify how the bearer token is formatted.
  string bearer_format = 6;
  // An object containing configuration information for the flow types supported.
  OAuth2Flows flows = 7;
  // Well-known URL to discover the OpenID Connect provider metadata.
  string open_id_connect_url = 8;
}

// Security Requirement object
message SecurityRequirement {
  // The name of the security scheme.
  string name = 1;
  // The scopes required for the security scheme.
  repeated string scopes = 2;
}

// OpenAPI Operation object
message Operation {
  string summary = 1;
  string description = 2;
  repeated string tags = 3;
  repeated string produces = 4;
  repeated string consumes = 5;
  // TODO repeated Parameter parameters = 6;
  // TODO repeated Response responses = 7;
  bool deprecated = 8;
  repeated SecurityRequirement security = 9;
  // TODO RequestBody request_body = 10;
}
